rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Collection de test (DOIT Ãªtre avant la rÃ¨gle gÃ©nÃ©rale)
    match /test/{document} {
      allow read, write: if true;
    }
    
    // RÃ¨gles pour la collection users (temporairement permissives)
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // ðŸ”§ RÃˆGLES CORRIGÃ‰ES POUR LES CATÃ‰GORIES
    match /categories/{categoryId} {
      allow read: if true; // Lecture publique des catÃ©gories
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // ðŸ†• RÃˆGLES POUR LES PRODUITS
    match /products/{productId} {
      allow read: if true; // Lecture publique des produits (pour le menu)
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // RÃˆGLES POUR LES ADRESSES DES UTILISATEURS
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ðŸ†• RÃˆGLES POUR LES COMMANDES
    match /orders/{orderId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin']);
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // RÃ¨gles par dÃ©faut pour les autres collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
